import { getNextSeatLayoutFirstChallenge } from '../helpers';

describe('getNextSeatLayoutFirstChallenge', () => {
  it('works with the given example', () => {
    const result = getNextSeatLayoutFirstChallenge([
      ['L', '.', 'L', 'L', '.', 'L', 'L', '.', 'L', 'L'],
      ['L', 'L', 'L', 'L', 'L', 'L', 'L', '.', 'L', 'L'],
      ['L', '.', 'L', '.', 'L', '.', '.', 'L', '.', '.'],
      ['L', 'L', 'L', 'L', '.', 'L', 'L', '.', 'L', 'L'],
      ['L', '.', 'L', 'L', '.', 'L', 'L', '.', 'L', 'L'],
      ['L', '.', 'L', 'L', 'L', 'L', 'L', '.', 'L', 'L'],
      ['.', '.', 'L', '.', 'L', '.', '.', '.', '.', '.'],
      ['L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L'],
      ['L', '.', 'L', 'L', 'L', 'L', 'L', 'L', '.', 'L'],
      ['L', '.', 'L', 'L', 'L', 'L', 'L', '.', 'L', 'L'],
    ]);

    expect(result).toEqual([
      ['#', '.', '#', '#', '.', '#', '#', '.', '#', '#'],
      ['#', '#', '#', '#', '#', '#', '#', '.', '#', '#'],
      ['#', '.', '#', '.', '#', '.', '.', '#', '.', '.'],
      ['#', '#', '#', '#', '.', '#', '#', '.', '#', '#'],
      ['#', '.', '#', '#', '.', '#', '#', '.', '#', '#'],
      ['#', '.', '#', '#', '#', '#', '#', '.', '#', '#'],
      ['.', '.', '#', '.', '#', '.', '.', '.', '.', '.'],
      ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
      ['#', '.', '#', '#', '#', '#', '#', '#', '.', '#'],
      ['#', '.', '#', '#', '#', '#', '#', '.', '#', '#'],
    ]);
  });
  it('works on the second round of the last example', () => {
    const result = getNextSeatLayoutFirstChallenge([
      ['#', '.', '#', '#', '.', '#', '#', '.', '#', '#'],
      ['#', '#', '#', '#', '#', '#', '#', '.', '#', '#'],
      ['#', '.', '#', '.', '#', '.', '.', '#', '.', '.'],
      ['#', '#', '#', '#', '.', '#', '#', '.', '#', '#'],
      ['#', '.', '#', '#', '.', '#', '#', '.', '#', '#'],
      ['#', '.', '#', '#', '#', '#', '#', '.', '#', '#'],
      ['.', '.', '#', '.', '#', '.', '.', '.', '.', '.'],
      ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
      ['#', '.', '#', '#', '#', '#', '#', '#', '.', '#'],
      ['#', '.', '#', '#', '#', '#', '#', '.', '#', '#'],
    ]);

    expect(result[0]).toEqual([
      '#',
      '.',
      'L',
      'L',
      '.',
      'L',
      '#',
      '.',
      '#',
      '#',
    ]);

    expect(result).toEqual([
      ['#', '.', 'L', 'L', '.', 'L', '#', '.', '#', '#'],
      ['#', 'L', 'L', 'L', 'L', 'L', 'L', '.', 'L', '#'],
      ['L', '.', 'L', '.', 'L', '.', '.', 'L', '.', '.'],
      ['#', 'L', 'L', 'L', '.', 'L', 'L', '.', 'L', '#'],
      ['#', '.', 'L', 'L', '.', 'L', 'L', '.', 'L', 'L'],
      ['#', '.', 'L', 'L', 'L', 'L', '#', '.', '#', '#'],
      ['.', '.', 'L', '.', 'L', '.', '.', '.', '.', '.'],
      ['#', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', '#'],
      ['#', '.', 'L', 'L', 'L', 'L', 'L', 'L', '.', 'L'],
      ['#', '.', '#', 'L', 'L', 'L', 'L', '.', '#', '#'],
    ]);
  });
});
